# Импортируем необходимые модули
import pygame, sys
from game import Game  # Предполагается, что есть файл game.py с классом Game
from colors import Colors  # Предполагается, что есть файл colors.py с определением цветов

# Инициализация Pygame
pygame.init()

# Определение размеров экрана
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Создание окна игры
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("The initial window")  # Название окна

# Определение цветов
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (128, 128, 128)
RED = (255, 0, 0)
dark_blue = (44, 44, 127)  # Темно-синий цвет фона

# Определение шрифтов для текста
font_title = pygame.font.Font(None, 74)  # Шрифт для заголовка
font_button = pygame.font.Font(None, 36)  # Шрифт для кнопки

# Рендеринг текста
title_text = font_title.render("Tetris", True, WHITE)  # Текст "Tetris"
button_text = font_button.render("Start", True, WHITE)  # Текст "Start"

# Настройка кнопки "Start"
button_width = 200
button_height = 50
button_x = SCREEN_WIDTH // 2 - button_width // 2  # Кнопка по центру по горизонтали
button_y = SCREEN_HEIGHT // 2 + 50  # Кнопка ниже заголовка


# Функция для отображения текста на экране
def draw_text(text, font, color, x, y):
    text_surface = font.render(text, True, color)  # Создаем поверхность с текстом
    text_rect = text_surface.get_rect()  # Получаем прямоугольник текста
    text_rect.center = (x, y)  # Центрируем текст
    screen.blit(text_surface, text_rect)  # Отображаем текст на экране


# Главный цикл заставки
running = True
while running:
    screen.fill(dark_blue)  # Заливаем экран темно-синим цветом

    # Отображение заголовка "Tetris"
    draw_text("Tetris", font_title, WHITE, SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 100)

    # Обработка позиции мыши и кликов
    mouse_pos = pygame.mouse.get_pos()  # Получаем текущую позицию курсора
    click = pygame.mouse.get_pressed()  # Проверяем, была ли нажата кнопка мыши

    # Проверка, находится ли курсор над кнопкой "Start"
    if button_x < mouse_pos[0] < button_x + button_width and button_y < mouse_pos[1] < button_y + button_height:
        pygame.draw.rect(screen, RED, (button_x, button_y, button_width, button_height))  # Красная кнопка при наведении
        if click[0] == 1:  # Если левая кнопка мыши нажата
            running = False  # Выходим из цикла заставки
    else:
        pygame.draw.rect(screen, GRAY,
                         (button_x, button_y, button_width, button_height))  # Серая кнопка при обычном состоянии

    # Отображение текста "Start" на кнопке
    draw_text("Start", font_button, BLACK, SCREEN_WIDTH // 2, button_y + button_height // 2)

    # Обработка событий
    for event in pygame.event.get():
        if event.type == pygame.QUIT:  # Если пользователь закрыл окно
            running = False  # Выходим из цикла

    pygame.display.flip()  # Обновляем экран

# После выхода из цикла заставки переходим к основной части игры

# Определение шрифта для счета и следующей фигуры
title_font = pygame.font.Font(None, 40)

# Рендеринг текста для счета и следующей фигуры
score_surface = title_font.render("Score", True, Colors.white)
next_surface = title_font.render("Next", True, Colors.white)
game_over_surface = title_font.render("GAME OVER", True, Colors.white)

# Определение области для отображения счета и следующей фигуры
score_rect = pygame.Rect(320, 55, 170, 60)
next_rect = pygame.Rect(320, 215, 170, 180)

# Изменение размеров окна для основной игры
screen = pygame.display.set_mode((500, 620))
pygame.display.set_caption("Python Tetris")

# Инициализация часов для контроля FPS
clock = pygame.time.Clock()

# Создание экземпляра игры
game = Game()

# Создание пользовательского события для обновления игры
GAME_UPDATE = pygame.USEREVENT
pygame.time.set_timer(GAME_UPDATE, 200)  # Установка таймера на 200 мс

# Главный игровой цикл
while True:
    for event in pygame.event.get():  # Обработка событий
        if event.type == pygame.QUIT:  # Если пользователь закрыл окно
            pygame.quit()
            sys.exit()

        # Обработка клавиш управления
        if event.type == pygame.KEYDOWN:
            if game.game_over == True:  # Если игра завершена, можно начать заново
                game.game_over = False
                game.reset()  # Сброс игры

            if event.key == pygame.K_LEFT and game.game_over == False:  # Движение влево
                game.move_left()

            if event.key == pygame.K_RIGHT and game.game_over == False:  # Движение вправо
                game.move_right()

            if event.key == pygame.K_DOWN and game.game_over == False:  # Ускоренное движение вниз
                game.move_down()
                game.update_score(0, 1)  # Обновление счета за ускоренное движение

            if event.key == pygame.K_UP and game.game_over == False:  # Поворот фигуры
                game.rotate()

        # Автоматическое движение фигуры вниз каждые 200 мс
        if event.type == GAME_UPDATE and game.game_over == False:
            game.move_down()

    # Рендеринг текущего счета
    score_value_surface = title_font.render(str(game.score), True, Colors.white)

    # Заливка экрана фоновым цветом
    screen.fill(Colors.dark_blue)

    # Отображение текста "Score" и "Next"
    screen.blit(score_surface, (365, 20, 50, 50))
    screen.blit(next_surface, (375, 180, 50, 50))

    # Если игра завершена, отображаем "GAME OVER"
    if game.game_over == True:
        screen.blit(game_over_surface, (320, 450, 50, 50))

    # Отрисовка рамок для счета и следующей фигуры
    pygame.draw.rect(screen, Colors.light_blue, score_rect, 0, 10)
    screen.blit(score_value_surface,
                score_value_surface.get_rect(centerx=score_rect.centerx, centery=score_rect.centery))
    pygame.draw.rect(screen, Colors.light_blue, next_rect, 0, 10)

    # Отрисовка игрового поля
    game.draw(screen)

    # Обновление экрана
    pygame.display.update()

    # Контроль FPS
    clock.tick(60)
